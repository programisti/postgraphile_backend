{"version":3,"sources":["../../src/plugins/SubscriptionPlugin.js"],"names":["isValidSubscription","Subscription","Object","keys","getFields","length","e","description","liveDescription","SubscriptionPlugin","builder","live","hook","schema","build","newWithHooks","extend","graphql","GraphQLObjectType","inflection","name","builtin","__origin","isRootSubscription","subscription"],"mappings":";;;;;;;AAGA,SAASA,mBAAT,CAA6BC,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAO,KAAP;AACD;AACD,QAAIC,OAAOC,IAAP,CAAYF,aAAaG,SAAb,EAAZ,EAAsCC,MAAtC,KAAiD,CAArD,EAAwD;AACtD,aAAO,KAAP;AACD;AACF,GAPD,CAOE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACD,SAAO,IAAP;AACD;;;AAED,MAAMC,cAAe,gHAArB;AACA,MAAMC,kBAAmB;;;;;;;;;;;;;;;;;yHAAzB;;kBAmBgB,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C,EAAEC,IAAF,EAA3C,EAAqD;AACnED,UAAQE,IAAR,CACE,eADF,EAEE,CAACC,MAAD,EAAaC,KAAb,KAAuB;AACrB,UAAM;AACJC,kBADI;AAEJC,YAFI;AAGJC,eAAS,EAAEC,iBAAF,EAHL;AAIJC;AAJI,QAKFL,KALJ;AAMA,UAAMb,eAAec,aACnBG,iBADmB,EAEnB;AACEE,YAAMD,WAAWE,OAAX,CAAmB,cAAnB,CADR;AAEEd,mBAAaI,OAAOH,eAAP,GAAyBD;AAFxC,KAFmB,EAMnB;AACEe,gBAAW,kDADb;AAEEC,0BAAoB;AAFtB,KANmB,EAUnB,IAVmB,CAArB;AAYA,QAAIvB,oBAAoBC,YAApB,CAAJ,EAAuC;AACrC,aAAOe,OACLH,MADK,EAEL;AACEW,sBAAcvB;AADhB,OAFK,EAKL,oCALK,CAAP;AAOD,KARD,MAQO;AACL,aAAOY,MAAP;AACD;AACF,GAhCH,EAiCE,CAAC,cAAD,CAjCF,EAkCE,EAlCF,EAmCE,CAAC,OAAD,CAnCF;AAqCD,C","file":"SubscriptionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"../SchemaBuilder\";\n\nfunction isValidSubscription(Subscription) {\n  try {\n    if (!Subscription) {\n      return false;\n    }\n    if (Object.keys(Subscription.getFields()).length === 0) {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nconst description = `The root subscription type: contains realtime events you can subscribe to with the \\`subscription\\` operation.`;\nconst liveDescription = `The root subscription type: contains events and live queries you can subscribe to with the \\`subscription\\` operation.\n\n#### Live Queries\n\nLive query fields are differentiated by containing \\`(live)\\` at the end of their description, \\\nthey are added for each field in the \\`Query\\` type. \\\nWhen you subscribe to a live query field, the selection set will be evaluated and sent to the \\\nclient, and then most things\\\\* that would cause the output of the selection set to change \\\nwill trigger the selection set to be re-evaluated and the results to be re-sent to the client.\n\n_(\\\\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_\n\nLive queries can be very expensive, so try and keep them small and focussed.\n\n#### Events\n\nEvent fields will run their selection set when, and only when, the specified server-side event occurs. \\\nThis makes them a lot more efficient than Live Queries, but it is still recommended that you keep payloads fairly small.`;\n\nexport default (async function SubscriptionPlugin(builder, { live }) {\n  builder.hook(\n    \"GraphQLSchema\",\n    (schema: {}, build) => {\n      const {\n        newWithHooks,\n        extend,\n        graphql: { GraphQLObjectType },\n        inflection,\n      } = build;\n      const Subscription = newWithHooks(\n        GraphQLObjectType,\n        {\n          name: inflection.builtin(\"Subscription\"),\n          description: live ? liveDescription : description,\n        },\n        {\n          __origin: `graphile-build built-in (root subscription type)`,\n          isRootSubscription: true,\n        },\n        true\n      );\n      if (isValidSubscription(Subscription)) {\n        return extend(\n          schema,\n          {\n            subscription: Subscription,\n          },\n          \"Adding subscription type to schema\"\n        );\n      } else {\n        return schema;\n      }\n    },\n    [\"Subscription\"],\n    [],\n    [\"Query\"]\n  );\n}: Plugin);\n"]}