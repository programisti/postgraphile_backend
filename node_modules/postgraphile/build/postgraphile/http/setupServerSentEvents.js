"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-any */
const stream_1 = require("stream");
function setupServerSentEvents(req, res, options) {
    const { _emitter } = options;
    // Making sure these options are set.
    req.socket.setTimeout(0);
    req.socket.setNoDelay(true);
    req.socket.setKeepAlive(true);
    // Set headers for Server-Sent Events.
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    if (req.httpVersionMajor >= 2) {
        // NOOP
    }
    else {
        res.setHeader('Connection', 'keep-alive');
    }
    const koaCtx = req['_koaCtx'];
    const isKoa = !!koaCtx;
    const stream = isKoa ? new stream_1.PassThrough() : null;
    if (isKoa) {
        koaCtx.response.body = stream;
        koaCtx.compress = false;
    }
    const sse = (str) => {
        if (isKoa) {
            stream.write(str);
        }
        else {
            res.write(str);
            // support running within the compression middleware.
            // https://github.com/expressjs/compression#server-sent-events
            if (typeof res.flushHeaders === 'function')
                res.flushHeaders();
        }
    };
    // Notify client that connection is open.
    sse('event: open\n\n');
    // Setup listeners.
    const schemaChangedCb = () => sse('event: change\ndata: schema\n\n');
    if (options.watchPg)
        _emitter.on('schemas:changed', schemaChangedCb);
    // Clean up when connection closes.
    const cleanup = () => {
        if (stream) {
            stream.end();
        }
        else {
            res.end();
        }
        _emitter.removeListener('schemas:changed', schemaChangedCb);
    };
    req.on('close', cleanup);
    req.on('finish', cleanup);
    req.on('error', cleanup);
    _emitter.on('test:close', cleanup);
}
exports.default = setupServerSentEvents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBTZXJ2ZXJTZW50RXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Bvc3RncmFwaGlsZS9odHRwL3NldHVwU2VydmVyU2VudEV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUEyQjtBQUMzQixtQ0FBcUM7QUFJckMsK0JBQ0UsR0FBb0IsRUFDcEIsR0FBbUIsRUFDbkIsT0FBb0M7SUFFcEMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUU3QixxQ0FBcUM7SUFDckMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUIsc0NBQXNDO0lBQ3RDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDbkQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDM0MsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxFQUFFO1FBQzdCLE9BQU87S0FDUjtTQUFNO1FBQ0wsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDM0M7SUFDRCxNQUFNLE1BQU0sR0FBSSxHQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN2QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksb0JBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDaEQsSUFBSSxLQUFLLEVBQUU7UUFDVCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDOUIsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7S0FDekI7SUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO1FBQzFCLElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwQjthQUFNO1lBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVmLHFEQUFxRDtZQUNyRCw4REFBOEQ7WUFDOUQsSUFBSSxPQUFRLEdBQVcsQ0FBQyxZQUFZLEtBQUssVUFBVTtnQkFBRyxHQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbEY7SUFDSCxDQUFDLENBQUM7SUFFRix5Q0FBeUM7SUFDekMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFdkIsbUJBQW1CO0lBQ25CLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0lBRXJFLElBQUksT0FBTyxDQUFDLE9BQU87UUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRXJFLG1DQUFtQztJQUNuQyxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDZDthQUFNO1lBQ0wsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ1g7UUFDRCxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQztJQUNGLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLFFBQVEsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUE5REQsd0NBOERDIn0=