"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function makeFieldHelpers(build, fieldContext, context, resolveInfo) {
    const { parseResolveInfo, pgQueryFromResolveData, pgSql: sql } = build;
    const { getDataFromParsedResolveInfoFragment } = fieldContext;
    const selectGraphQLResultFromTable = async (tableFragment, builderCallback) => {
        const { pgClient } = context;
        const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);
        const PayloadType = resolveInfo.returnType;
        const resolveData = getDataFromParsedResolveInfoFragment(parsedResolveInfoFragment, PayloadType);
        const tableAlias = sql.identifier(Symbol());
        const query = pgQueryFromResolveData(tableFragment, tableAlias, resolveData, {}, (sqlBuilder) => builderCallback(tableAlias, sqlBuilder));
        const { text, values } = sql.compile(query);
        const { rows } = await pgClient.query(text, values);
        return rows;
    };
    const graphileHelpers = {
        build,
        fieldContext,
        selectGraphQLResultFromTable,
    };
    return graphileHelpers;
}
exports.makeFieldHelpers = makeFieldHelpers;
function requireColumn(build, context, method, col, alias) {
    const { pgSql: sql } = build;
    context[method](() => ({
        pgQuery: (queryBuilder) => {
            queryBuilder.select(sql.query `${queryBuilder.getTableAlias()}.${sql.identifier(col)}`, alias);
        },
    }));
}
exports.requireColumn = requireColumn;
function requireChildColumn(build, context, col, alias) {
    return requireColumn(build, context, "addArgDataGenerator", col, alias);
}
exports.requireChildColumn = requireChildColumn;
function requireSiblingColumn(build, context, col, alias) {
    return requireColumn(build, context, "addDataGenerator", col, alias);
}
exports.requireSiblingColumn = requireSiblingColumn;
//# sourceMappingURL=fieldHelpers.js.map