{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["PgAllRows","builder","pgViewUniqueKey","pgSimpleCollections","subscriptions","hook","fields","build","context","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","graphql","GraphQLList","GraphQLNonNull","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","fieldWithHooks","scope","isRootQuery","class","reduce","memo","table","isSelectable","namespace","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","primaryKeyConstraint","primaryKeys","keyAttributes","isView","t","classKind","viewUniqueKey","tags","uniqueKey","uniqueIdAttribute","find","attr","undefined","namespaceName","schema","sqlFullTableName","identifier","makeField","isConnection","fieldName","allRows","allRowsSimple","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","resolveContext","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","returnType","checkerGenerator","query","useAsterisk","canUseAsterisk","withPaginationAsFields","queryBuilder","makeLiveCollection","_checkerGenerator","selectIdentifiers","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","rootValue","text","values","compile","debugSql","enabled","result","liveCollection","checker","rows","row","liveRecord","__identifiers","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","simpleCollections","hasConnections","hasSimpleCollections"],"mappings":"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","file":"PgAllRows.js","sourcesContent":["// @flow\n\nimport type { Plugin } from \"graphile-build\";\nimport debugSql from \"./debugSql\";\n\nexport default (async function PgAllRows(\n  builder,\n  { pgViewUniqueKey, pgSimpleCollections, subscriptions }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        parseResolveInfo,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        inflection,\n        graphql: { GraphQLList, GraphQLNonNull },\n        pgQueryFromResolveData: queryFromResolveData,\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit: omit,\n      } = build;\n      const {\n        fieldWithHooks,\n        scope: { isRootQuery },\n      } = context;\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class.reduce((memo, table) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!table.isSelectable) return memo;\n          if (!table.namespace) return memo;\n          if (omit(table, \"all\")) return memo;\n\n          const TableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableType) {\n            return memo;\n          }\n          const tableTypeName = TableType.name;\n          const ConnectionType = getTypeByName(\n            inflection.connection(TableType.name)\n          );\n          if (!TableType) {\n            throw new Error(\n              `Could not find GraphQL type for table '${table.name}'`\n            );\n          }\n          const attributes = table.attributes;\n          const primaryKeyConstraint = table.primaryKeyConstraint;\n          const primaryKeys =\n            primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n          const isView = t => t.classKind === \"v\";\n          const viewUniqueKey = table.tags.uniqueKey || pgViewUniqueKey;\n          const uniqueIdAttribute = viewUniqueKey\n            ? attributes.find(attr => attr.name === viewUniqueKey)\n            : undefined;\n          if (isView && table.tags.uniqueKey && !uniqueIdAttribute) {\n            throw new Error(\n              `Could not find the named unique key '${\n                table.tags.uniqueKey\n              }' on view '${table.namespaceName}.${table.name}'`\n            );\n          }\n          if (!ConnectionType) {\n            throw new Error(\n              `Could not find GraphQL connection type for table '${table.name}'`\n            );\n          }\n          const schema = table.namespace;\n          const sqlFullTableName = sql.identifier(schema.name, table.name);\n          function makeField(isConnection) {\n            const fieldName = isConnection\n              ? inflection.allRows(table)\n              : inflection.allRowsSimple(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: isConnection\n                    ? `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`\n                    : `Reads a set of \\`${tableTypeName}\\`.`,\n                  type: isConnection\n                    ? ConnectionType\n                    : new GraphQLList(new GraphQLNonNull(TableType)),\n                  args: {},\n                  async resolve(parent, args, resolveContext, resolveInfo) {\n                    const { pgClient } = resolveContext;\n                    const parsedResolveInfoFragment = parseResolveInfo(\n                      resolveInfo\n                    );\n                    parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      resolveInfo.returnType\n                    );\n                    let checkerGenerator;\n                    const query = queryFromResolveData(\n                      sqlFullTableName,\n                      undefined,\n                      resolveData,\n                      {\n                        useAsterisk: table.canUseAsterisk,\n                        withPaginationAsFields: isConnection,\n                      },\n                      queryBuilder => {\n                        if (subscriptions) {\n                          queryBuilder.makeLiveCollection(\n                            table,\n                            _checkerGenerator => {\n                              checkerGenerator = _checkerGenerator;\n                            }\n                          );\n                        }\n                        if (primaryKeys) {\n                          if (subscriptions && !isConnection) {\n                            queryBuilder.selectIdentifiers(table);\n                          }\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              // Order by PK if no order specified\n                              queryBuilder.data.cursorPrefix = [\n                                \"primary_key_asc\",\n                              ];\n                              primaryKeys.forEach(key => {\n                                queryBuilder.orderBy(\n                                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )}`,\n                                  true\n                                );\n                              });\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        } else if (isView(table) && !!uniqueIdAttribute) {\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              queryBuilder.data.cursorPrefix = [\n                                \"view_unique_key_asc\",\n                              ];\n                              queryBuilder.orderBy(\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  uniqueIdAttribute.name\n                                )}`,\n                                true\n                              );\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        }\n                      },\n                      resolveContext,\n                      resolveInfo.rootValue\n                    );\n                    const { text, values } = sql.compile(query);\n                    if (debugSql.enabled) debugSql(text);\n                    const result = await pgClient.query(text, values);\n\n                    const liveCollection =\n                      resolveInfo.rootValue &&\n                      resolveInfo.rootValue.liveCollection;\n                    if (subscriptions && liveCollection && checkerGenerator) {\n                      const checker = checkerGenerator();\n                      liveCollection(\"pg\", table, checker);\n                    }\n\n                    if (isConnection) {\n                      const {\n                        rows: [row],\n                      } = result;\n                      return addStartEndCursor(row);\n                    } else {\n                      const liveRecord =\n                        resolveInfo.rootValue &&\n                        resolveInfo.rootValue.liveRecord;\n                      if (\n                        subscriptions &&\n                        !isConnection &&\n                        primaryKeys &&\n                        liveRecord\n                      ) {\n                        result.rows.forEach(\n                          row =>\n                            row && liveRecord(\"pg\", table, row.__identifiers)\n                        );\n                      }\n                      return result.rows;\n                    }\n                  },\n                };\n              },\n              {\n                isPgFieldConnection: isConnection,\n                isPgFieldSimpleCollection: !isConnection,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          const simpleCollections =\n            table.tags.simpleCollections || pgSimpleCollections;\n          const hasConnections = simpleCollections !== \"only\";\n          const hasSimpleCollections =\n            simpleCollections === \"only\" || simpleCollections === \"both\";\n          if (TableType && ConnectionType && hasConnections) {\n            makeField(true);\n          }\n          if (TableType && hasSimpleCollections) {\n            makeField(false);\n          }\n          return memo;\n        }, {}),\n        `Adding 'all*' relations to root Query`\n      );\n    },\n    [\"PgAllRows\"],\n    [],\n    [\"PgTables\"]\n  );\n}: Plugin);\n"]}