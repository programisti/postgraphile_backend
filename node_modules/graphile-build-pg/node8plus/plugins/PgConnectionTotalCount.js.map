{"version":3,"sources":["../../src/plugins/PgConnectionTotalCount.js"],"names":["PgConnectionTotalCount","builder","hook","fields","build","context","extend","inflection","graphql","GraphQLInt","GraphQLNonNull","pgSql","sql","scope","isPgRowConnectionType","pgIntrospection","table","fieldWithHooks","Self","kind","namespace","tableTypeName","tableType","totalCount","addDataGenerator","pgAggregateQuery","aggregateQueryBuilder","select","fragment","description","type","resolve","parent","aggregates","isPgConnectionTotalCountField","name"],"mappings":";;;;;;kBAGgB,SAASA,sBAAT,CAAgCC,OAAhC,EAAyC;AACvDA,UAAQC,IAAR,CACE,0BADF,EAEE,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AAC1B,UAAM;AACJC,YADI;AAEJC,gBAFI;AAGJC,eAAS,EAAEC,UAAF,EAAcC,cAAd,EAHL;AAIJC,aAAOC;AAJH,QAKFR,KALJ;AAMA,UAAM;AACJS,aAAO,EAAEC,qBAAF,EAAyBC,iBAAiBC,KAA1C,EADH;AAEJC,oBAFI;AAGJC;AAHI,QAIFb,OAJJ;;AAMA,QACE,CAACS,qBAAD,IACA,CAACE,KADD,IAEAA,MAAMG,IAAN,KAAe,OAFf,IAGA,CAACH,MAAMI,SAJT,EAKE;AACA,aAAOjB,MAAP;AACD;AACD,UAAMkB,gBAAgBd,WAAWe,SAAX,CAAqBN,KAArB,CAAtB;;AAEA,WAAOV,OACLH,MADK,EAEL;AACEoB,kBAAYN,eACV,YADU,EAEV,CAAC,EAAEO,gBAAF,EAAD,KAA0B;AACxBA,yBAAiB,MAAM;AACrB,iBAAO;AACLC,8BAAkBC,yBAAyB;AACzCA,oCAAsBC,MAAtB,CACEf,IAAIgB,QAAS,UADf,EAEE,YAFF;AAID;AANI,WAAP;AAQD,SATD;AAUA,eAAO;AACLC,uBAAc,wBAAuBR,aAAc,uCAD9C;AAELS,gBAAM,IAAIpB,cAAJ,CAAmBD,UAAnB,CAFD;AAGLsB,kBAAQC,MAAR,EAAgB;AACd,mBACGA,OAAOC,UAAP,IAAqBD,OAAOC,UAAP,CAAkBV,UAAxC,IAAuD,CADzD;AAGD;AAPI,SAAP;AASD,OAtBS,EAuBV;AACEW,uCAA+B;AADjC,OAvBU;AADd,KAFK,EA+BJ,oCAAmChB,KAAKiB,IAAK,GA/BzC,CAAP;AAiCD,GA1DH,EA2DE,CAAC,wBAAD,CA3DF;AA6DD,C","file":"PgConnectionTotalCount.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionTotalCount(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        inflection,\n        graphql: { GraphQLInt, GraphQLNonNull },\n        pgSql: sql,\n      } = build;\n      const {\n        scope: { isPgRowConnectionType, pgIntrospection: table },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      if (\n        !isPgRowConnectionType ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return fields;\n      }\n      const tableTypeName = inflection.tableType(table);\n\n      return extend(\n        fields,\n        {\n          totalCount: fieldWithHooks(\n            \"totalCount\",\n            ({ addDataGenerator }) => {\n              addDataGenerator(() => {\n                return {\n                  pgAggregateQuery: aggregateQueryBuilder => {\n                    aggregateQueryBuilder.select(\n                      sql.fragment`count(1)`,\n                      \"totalCount\"\n                    );\n                  },\n                };\n              });\n              return {\n                description: `The count of *all* \\`${tableTypeName}\\` you could get from the connection.`,\n                type: new GraphQLNonNull(GraphQLInt),\n                resolve(parent) {\n                  return (\n                    (parent.aggregates && parent.aggregates.totalCount) || 0\n                  );\n                },\n              };\n            },\n            {\n              isPgConnectionTotalCountField: true,\n            }\n          ),\n        },\n        `Adding totalCount to connection '${Self.name}'`\n      );\n    },\n    [\"PgConnectionTotalCount\"]\n  );\n}: Plugin);\n"]}