{"version":3,"sources":["../../src/plugins/PgComputedColumnsPlugin.js"],"names":["getComputedColumnDetails","build","table","proc","isStable","namespaceId","name","startsWith","argTypeIds","length","type","id","argTypes","reduce","prev","typeId","idx","argModes","push","pgIntrospectionResultsByKind","typeById","slice","some","class","isSelectable","pseudoColumnName","substr","PgComputedColumnsPlugin","builder","pgSimpleCollections","hook","fields","context","scope","isPgRowType","isPgCompoundType","isInputType","pgIntrospection","fieldWithHooks","Self","kind","namespace","extend","introspectionResultsByKind","inflection","pgOmit","omit","pgMakeProcField","makeProcField","swallowError","describePgEntity","sqlCommentByAddingTags","tableType","Error","procedure","memo","computedColumnDetails","makeField","forceList","fieldName","computedColumnList","computedColumn","computed","e","simpleCollections","tags","hasConnections","hasSimpleCollections","returnsSet"],"mappings":"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","file":"PgComputedColumnsPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"graphile-build\";\nimport type { PgClass, PgProc } from \"./PgIntrospectionPlugin\";\n\n// This interface is not official yet, don't rely on it.\nexport const getComputedColumnDetails = (\n  build: Build,\n  table: PgClass,\n  proc: PgProc\n) => {\n  if (!proc.isStable) return null;\n  if (proc.namespaceId !== table.namespaceId) return null;\n  if (!proc.name.startsWith(`${table.name}_`)) return null;\n  if (proc.argTypeIds.length < 1) return null;\n  if (proc.argTypeIds[0] !== table.type.id) return null;\n\n  const argTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n    if (\n      proc.argModes.length === 0 || // all args are `in`\n      proc.argModes[idx] === \"i\" || // this arg is `in`\n      proc.argModes[idx] === \"b\" // this arg is `inout`\n    ) {\n      prev.push(build.pgIntrospectionResultsByKind.typeById[typeId]);\n    }\n    return prev;\n  }, []);\n  if (\n    argTypes\n      .slice(1)\n      .some(type => type.type === \"c\" && type.class && type.class.isSelectable)\n  ) {\n    // Accepts two input tables? Skip.\n    return null;\n  }\n\n  const pseudoColumnName = proc.name.substr(table.name.length + 1);\n  return { argTypes, pseudoColumnName };\n};\n\nexport default (function PgComputedColumnsPlugin(\n  builder,\n  { pgSimpleCollections }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isPgCompoundType,\n          isInputType,\n          pgIntrospection: table,\n        },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      if (\n        isInputType ||\n        !(isPgRowType || isPgCompoundType) ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return fields;\n      }\n\n      const {\n        extend,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        inflection,\n        pgOmit: omit,\n        pgMakeProcField: makeProcField,\n        swallowError,\n        describePgEntity,\n        sqlCommentByAddingTags,\n      } = build;\n      const tableType = table.type;\n      if (!tableType) {\n        throw new Error(\"Could not determine the type for this table\");\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.procedure.reduce((memo, proc) => {\n          if (omit(proc, \"execute\")) return memo;\n          const computedColumnDetails = getComputedColumnDetails(\n            build,\n            table,\n            proc\n          );\n          if (!computedColumnDetails) return memo;\n          const { pseudoColumnName } = computedColumnDetails;\n          function makeField(forceList) {\n            const fieldName = forceList\n              ? inflection.computedColumnList(pseudoColumnName, proc, table)\n              : inflection.computedColumn(pseudoColumnName, proc, table);\n            try {\n              memo = extend(\n                memo,\n                {\n                  [fieldName]: makeProcField(fieldName, proc, build, {\n                    fieldWithHooks,\n                    computed: true,\n                    forceList,\n                  }),\n                },\n                `Adding computed column for ${describePgEntity(\n                  proc\n                )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n                  proc,\n                  {\n                    fieldName: \"newNameHere\",\n                  }\n                )}`\n              );\n            } catch (e) {\n              swallowError(e);\n            }\n          }\n          const simpleCollections =\n            proc.tags.simpleCollections || pgSimpleCollections;\n          const hasConnections = simpleCollections !== \"only\";\n          const hasSimpleCollections =\n            simpleCollections === \"only\" || simpleCollections === \"both\";\n          if (!proc.returnsSet || hasConnections) {\n            makeField(false);\n          }\n          if (proc.returnsSet && hasSimpleCollections) {\n            makeField(true);\n          }\n          return memo;\n        }, {}),\n        `Adding computed column to '${Self.name}'`\n      );\n    },\n    [\"PgComputedColumns\"]\n  );\n}: Plugin);\n"]}